/* Auto-generated by genmsg_cpp for file /home/student/h/hdeeken/ros/uos-ros-pkg/katana_driver/katana/msg/JointMovementFeedback.msg */
#ifndef KATANA_MESSAGE_JOINTMOVEMENTFEEDBACK_H
#define KATANA_MESSAGE_JOINTMOVEMENTFEEDBACK_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace katana
{
template <class ContainerAllocator>
struct JointMovementFeedback_ : public ros::Message
{
  typedef JointMovementFeedback_<ContainerAllocator> Type;

  JointMovementFeedback_()
  : feedback()
  {
  }

  JointMovementFeedback_(const ContainerAllocator& _alloc)
  : feedback(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _feedback_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  feedback;


private:
  static const char* __s_getDataType_() { return "katana/JointMovementFeedback"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "c14cdf907e5c7c7fd47292add15660f0"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#feedback definition\n\
string feedback\n\
\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, feedback);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, feedback);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(feedback);
    return size;
  }

  typedef boost::shared_ptr< ::katana::JointMovementFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::katana::JointMovementFeedback_<ContainerAllocator>  const> ConstPtr;
}; // struct JointMovementFeedback
typedef  ::katana::JointMovementFeedback_<std::allocator<void> > JointMovementFeedback;

typedef boost::shared_ptr< ::katana::JointMovementFeedback> JointMovementFeedbackPtr;
typedef boost::shared_ptr< ::katana::JointMovementFeedback const> JointMovementFeedbackConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::katana::JointMovementFeedback_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::katana::JointMovementFeedback_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace katana

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::katana::JointMovementFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c14cdf907e5c7c7fd47292add15660f0";
  }

  static const char* value(const  ::katana::JointMovementFeedback_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc14cdf907e5c7c7fULL;
  static const uint64_t static_value2 = 0xd47292add15660f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::katana::JointMovementFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "katana/JointMovementFeedback";
  }

  static const char* value(const  ::katana::JointMovementFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::katana::JointMovementFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#feedback definition\n\
string feedback\n\
\n\
\n\
";
  }

  static const char* value(const  ::katana::JointMovementFeedback_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::katana::JointMovementFeedback_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.feedback);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct JointMovementFeedback_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::katana::JointMovementFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::katana::JointMovementFeedback_<ContainerAllocator> & v) 
  {
    s << indent << "feedback: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.feedback);
  }
};


} // namespace message_operations
} // namespace ros

#endif // KATANA_MESSAGE_JOINTMOVEMENTFEEDBACK_H


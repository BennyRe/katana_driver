/* Auto-generated by genmsg_cpp for file /home/student/h/hdeeken/ros/uos-ros-pkg/katana_driver/katana/msg/JointMovementResult.msg */
#ifndef KATANA_MESSAGE_JOINTMOVEMENTRESULT_H
#define KATANA_MESSAGE_JOINTMOVEMENTRESULT_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace katana
{
template <class ContainerAllocator>
struct JointMovementResult_ : public ros::Message
{
  typedef JointMovementResult_<ContainerAllocator> Type;

  JointMovementResult_()
  : result()
  {
  }

  JointMovementResult_(const ContainerAllocator& _alloc)
  : result(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _result_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  result;


private:
  static const char* __s_getDataType_() { return "katana/JointMovementResult"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "c22f2a1ed8654a0b365f1bb3f7ff2c0f"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#result definition\n\
string result\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, result);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, result);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(result);
    return size;
  }

  typedef boost::shared_ptr< ::katana::JointMovementResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::katana::JointMovementResult_<ContainerAllocator>  const> ConstPtr;
}; // struct JointMovementResult
typedef  ::katana::JointMovementResult_<std::allocator<void> > JointMovementResult;

typedef boost::shared_ptr< ::katana::JointMovementResult> JointMovementResultPtr;
typedef boost::shared_ptr< ::katana::JointMovementResult const> JointMovementResultConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::katana::JointMovementResult_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::katana::JointMovementResult_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace katana

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::katana::JointMovementResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c22f2a1ed8654a0b365f1bb3f7ff2c0f";
  }

  static const char* value(const  ::katana::JointMovementResult_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc22f2a1ed8654a0bULL;
  static const uint64_t static_value2 = 0x365f1bb3f7ff2c0fULL;
};

template<class ContainerAllocator>
struct DataType< ::katana::JointMovementResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "katana/JointMovementResult";
  }

  static const char* value(const  ::katana::JointMovementResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::katana::JointMovementResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#result definition\n\
string result\n\
\n\
";
  }

  static const char* value(const  ::katana::JointMovementResult_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::katana::JointMovementResult_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct JointMovementResult_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::katana::JointMovementResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::katana::JointMovementResult_<ContainerAllocator> & v) 
  {
    s << indent << "result: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.result);
  }
};


} // namespace message_operations
} // namespace ros

#endif // KATANA_MESSAGE_JOINTMOVEMENTRESULT_H


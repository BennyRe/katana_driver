; Auto-generated. Do not edit!


(in-package katana-msg)


;//! \htmlinclude JointMovementActionGoal.msg.html

(defclass <JointMovementActionGoal> (ros-message)
  ((header
    :reader header-val
    :initarg :header
    :type roslib-msg:<Header>
    :initform (make-instance 'roslib-msg:<Header>))
   (goal_id
    :reader goal_id-val
    :initarg :goal_id
    :type actionlib_msgs-msg:<GoalID>
    :initform (make-instance 'actionlib_msgs-msg:<GoalID>))
   (goal
    :reader goal-val
    :initarg :goal
    :type katana-msg:<JointMovementGoal>
    :initform (make-instance 'katana-msg:<JointMovementGoal>)))
)
(defmethod serialize ((msg <JointMovementActionGoal>) ostream)
  "Serializes a message object of type '<JointMovementActionGoal>"
  (serialize (slot-value msg 'header) ostream)
  (serialize (slot-value msg 'goal_id) ostream)
  (serialize (slot-value msg 'goal) ostream)
)
(defmethod deserialize ((msg <JointMovementActionGoal>) istream)
  "Deserializes a message object of type '<JointMovementActionGoal>"
  (deserialize (slot-value msg 'header) istream)
  (deserialize (slot-value msg 'goal_id) istream)
  (deserialize (slot-value msg 'goal) istream)
  msg
)
(defmethod ros-datatype ((msg (eql '<JointMovementActionGoal>)))
  "Returns string type for a message object of type '<JointMovementActionGoal>"
  "katana/JointMovementActionGoal")
(defmethod md5sum ((type (eql '<JointMovementActionGoal>)))
  "Returns md5sum for a message object of type '<JointMovementActionGoal>"
  "2b6e9b9692b7ab0a124ca0558966f79a")
(defmethod message-definition ((type (eql '<JointMovementActionGoal>)))
  "Returns full string definition for message of type '<JointMovementActionGoal>"
  (format nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalID goal_id~%JointMovementGoal goal~%~%================================================================================~%MSG: roslib/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.secs: seconds (stamp_secs) since epoch~%# * stamp.nsecs: nanoseconds since stamp_secs~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%# 0: no frame~%# 1: global frame~%string frame_id~%~%================================================================================~%MSG: actionlib_msgs/GoalID~%# The stamp should store the time at which this goal was requested.~%# It is used by an action server when it tries to preempt all~%# goals that were requested before a certain time~%time stamp~%~%# The id provides a way to associate feedback and~%# result message with specific goal requests. The id~%# specified must be unique.~%string id~%~%~%================================================================================~%MSG: katana/JointMovementGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%#goal definition~%sensor_msgs/JointState jointGoal~%~%================================================================================~%MSG: sensor_msgs/JointState~%# This is a message that holds data to describe the state of a set of torque controlled joints. ~%#~%# The state of each joint (revolute or prismatic) is defined by:~%#  * the position of the joint (rad or m),~%#  * the velocity of the joint (rad/s or m/s) and ~%#  * the effort that is applied in the joint (Nm or N).~%#~%# Each joint is uniquely identified by its name~%# The header specifies the time at which the joint states were recorded. All the joint states~%# in one message have to be recorded at the same time.~%#~%# This message consists of a multiple arrays, one for each part of the joint state. ~%# The goal is to make each of the fields optional. When e.g. your joints have no~%# effort associated with them, you can leave the effort array empty. ~%#~%# All arrays in this message should have the same size, or be empty.~%# This is the only way to uniquely associate the joint name with the correct~%# states.~%~%~%Header header~%~%string[] name~%float64[] position~%float64[] velocity~%float64[] effort~%~%~%"))
(defmethod serialization-length ((msg <JointMovementActionGoal>))
  (+ 0
     (serialization-length (slot-value msg 'header))
     (serialization-length (slot-value msg 'goal_id))
     (serialization-length (slot-value msg 'goal))
))
(defmethod ros-message-to-list ((msg <JointMovementActionGoal>))
  "Converts a ROS message object to a list"
  (list '<JointMovementActionGoal>
    (cons ':header (header-val msg))
    (cons ':goal_id (goal_id-val msg))
    (cons ':goal (goal-val msg))
))

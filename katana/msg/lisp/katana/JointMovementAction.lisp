; Auto-generated. Do not edit!


(in-package katana-msg)


;//! \htmlinclude JointMovementAction.msg.html

(defclass <JointMovementAction> (ros-message)
  ((action_goal
    :reader action_goal-val
    :initarg :action_goal
    :type katana-msg:<JointMovementActionGoal>
    :initform (make-instance 'katana-msg:<JointMovementActionGoal>))
   (action_result
    :reader action_result-val
    :initarg :action_result
    :type katana-msg:<JointMovementActionResult>
    :initform (make-instance 'katana-msg:<JointMovementActionResult>))
   (action_feedback
    :reader action_feedback-val
    :initarg :action_feedback
    :type katana-msg:<JointMovementActionFeedback>
    :initform (make-instance 'katana-msg:<JointMovementActionFeedback>)))
)
(defmethod serialize ((msg <JointMovementAction>) ostream)
  "Serializes a message object of type '<JointMovementAction>"
  (serialize (slot-value msg 'action_goal) ostream)
  (serialize (slot-value msg 'action_result) ostream)
  (serialize (slot-value msg 'action_feedback) ostream)
)
(defmethod deserialize ((msg <JointMovementAction>) istream)
  "Deserializes a message object of type '<JointMovementAction>"
  (deserialize (slot-value msg 'action_goal) istream)
  (deserialize (slot-value msg 'action_result) istream)
  (deserialize (slot-value msg 'action_feedback) istream)
  msg
)
(defmethod ros-datatype ((msg (eql '<JointMovementAction>)))
  "Returns string type for a message object of type '<JointMovementAction>"
  "katana/JointMovementAction")
(defmethod md5sum ((type (eql '<JointMovementAction>)))
  "Returns md5sum for a message object of type '<JointMovementAction>"
  "8cc1e1039a992f9eea6067e300220dc6")
(defmethod message-definition ((type (eql '<JointMovementAction>)))
  "Returns full string definition for message of type '<JointMovementAction>"
  (format nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%JointMovementActionGoal action_goal~%JointMovementActionResult action_result~%JointMovementActionFeedback action_feedback~%~%================================================================================~%MSG: katana/JointMovementActionGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalID goal_id~%JointMovementGoal goal~%~%================================================================================~%MSG: roslib/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.secs: seconds (stamp_secs) since epoch~%# * stamp.nsecs: nanoseconds since stamp_secs~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%# 0: no frame~%# 1: global frame~%string frame_id~%~%================================================================================~%MSG: actionlib_msgs/GoalID~%# The stamp should store the time at which this goal was requested.~%# It is used by an action server when it tries to preempt all~%# goals that were requested before a certain time~%time stamp~%~%# The id provides a way to associate feedback and~%# result message with specific goal requests. The id~%# specified must be unique.~%string id~%~%~%================================================================================~%MSG: katana/JointMovementGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%#goal definition~%sensor_msgs/JointState jointGoal~%~%================================================================================~%MSG: sensor_msgs/JointState~%# This is a message that holds data to describe the state of a set of torque controlled joints. ~%#~%# The state of each joint (revolute or prismatic) is defined by:~%#  * the position of the joint (rad or m),~%#  * the velocity of the joint (rad/s or m/s) and ~%#  * the effort that is applied in the joint (Nm or N).~%#~%# Each joint is uniquely identified by its name~%# The header specifies the time at which the joint states were recorded. All the joint states~%# in one message have to be recorded at the same time.~%#~%# This message consists of a multiple arrays, one for each part of the joint state. ~%# The goal is to make each of the fields optional. When e.g. your joints have no~%# effort associated with them, you can leave the effort array empty. ~%#~%# All arrays in this message should have the same size, or be empty.~%# This is the only way to uniquely associate the joint name with the correct~%# states.~%~%~%Header header~%~%string[] name~%float64[] position~%float64[] velocity~%float64[] effort~%~%================================================================================~%MSG: katana/JointMovementActionResult~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalStatus status~%JointMovementResult result~%~%================================================================================~%MSG: actionlib_msgs/GoalStatus~%GoalID goal_id~%uint8 status~%uint8 PENDING         = 0   # The goal has yet to be processed by the action server~%uint8 ACTIVE          = 1   # The goal is currently being processed by the action server~%uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing~%                            #   and has since completed its execution (Terminal State)~%uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)~%uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due~%                            #    to some failure (Terminal State)~%uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,~%                            #    because the goal was unattainable or invalid (Terminal State)~%uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing~%                            #    and has not yet completed execution~%uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,~%                            #    but the action server has not yet confirmed that the goal is canceled~%uint8 RECALLED        = 8   # The goal received a cancel request before it started executing~%                            #    and was successfully cancelled (Terminal State)~%uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be~%                            #    sent over the wire by an action server~%~%#Allow for the user to associate a string with GoalStatus for debugging~%string text~%~%~%================================================================================~%MSG: katana/JointMovementResult~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%#result definition~%string result~%~%================================================================================~%MSG: katana/JointMovementActionFeedback~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalStatus status~%JointMovementFeedback feedback~%~%================================================================================~%MSG: katana/JointMovementFeedback~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%#feedback definition~%string feedback~%~%~%~%"))
(defmethod serialization-length ((msg <JointMovementAction>))
  (+ 0
     (serialization-length (slot-value msg 'action_goal))
     (serialization-length (slot-value msg 'action_result))
     (serialization-length (slot-value msg 'action_feedback))
))
(defmethod ros-message-to-list ((msg <JointMovementAction>))
  "Converts a ROS message object to a list"
  (list '<JointMovementAction>
    (cons ':action_goal (action_goal-val msg))
    (cons ':action_result (action_result-val msg))
    (cons ':action_feedback (action_feedback-val msg))
))

# HOW TO BUILD THE .DAE/.ZAE FILES AND GET OPENRAVE IK RUNNING
# 
# also see: http://answers.ros.org/question/858/how-to-run-ik_openravepy-with-my-urdf-file
#
# most important step: In order to do successful collada export, you need to use 
# the robot_model trunk, the robot_model diamondback has an old exporter. 

svn co https://code.ros.org/svn/ros-pkg/stacks/robot_model/trunk robot_model

# Then rebuild the relevant projects.

rosmake robot_model katana_description openrave_planning

# now you have time for a coffee or two...
#
# next create the .urdf: 

rosrun xacro xacro.py katana.urdf.xacro > katana6m90a.urdf

# the current dae file was generated by manually removing katana_internal_controlbox_link 
# and the corresponding joint from the URDF file, since otherwise there will be a bug with
# the collada export.
#
# now the .dae can be generated:

rosrun collada_urdf urdf_to_collada katana6m90a.urdf katana6m90a.dae

# if you want, you can zip the .dae together with a manifest.xml file to get the .zae.
# the manifest.xml should look like this:
#
# <?xml version="1.0" encoding="utf-8"?>
# <dae_root>./katana6m90a.dae</dae_root>
#
# optionally, check the links:

export PYTHONPATH=$(rospack find openrave)/lib/python2.6/site-packages:$PYTHONPATH
rosrun openrave openrave0.3-robot.py katana6m90a.dae --list links

# optionally, visualize the model:

rosrun openrave openrave0.3 -f katana6m90a.dae

# and now start the IK service:

rosrun orrosplanning ik_openrave.py --scene="katana6m90a.robot.xml"

# to disable the viewer:

rosrun orrosplanning ik_openrave.py --scene="katana6m90a.robot.xml"

